pipeline {
    agent {
        node {
            label 'master'
        }
    }
    
    environment {
        JENKINS_NODE_COOKIE = 'dontkill'
    }
    
    stages {
        stage('Preparation') { // for display purposes
            steps {
              // clean the workspace
              cleanWs()
            }
        }

       stage('Download') {
           steps {
              // Download code from a GitHub repository
              git branch: 'master', url: 'https://github.com/1810-java-blake/demos.git'
           }
        }

        stage('MVN Build') {
            steps {
                dir('week4') {
                    dir('LeagueOfLegendsApi') {
                        // Run the maven build
                        sh "mvn -Dmaven.test.failure.ignore clean package"
                    }
                }
            }
        }

        stage('Deploy') {
            /*
            * deploying a docker container example
            agent {
                docker {
                    image 'openjdk/8-jre'
                    label 'janus-server'
                    args ''
                }
            }
            */
            
            steps {
                dir('week4') {
                    dir('LeagueOfLegendsApi') {
                        dir ('target') {
                            // run the Janus server
                            sh "mv LeagueOfLegendsApi.war /usr/apache/apache-tomcat-8.5.35/webapps/"
                        }
                    }
                }
            }
        }

    }
    
    post {
        always {
            sh "echo 'i always run'"
            
            /* SLACK message example
            
            slackSend channel: '#some-channel',
                color: 'good',
                message: "The Janus server has attempted a build"
                
            */
        }
        
        success {
            sh "echo 'i only run on success'"
        }
        
        unstable {
            sh "echo 'i run when the build is unstable (testing?)'"
        }
        
        failure {
            sh "echo 'i run when things failed'"
        }
        
        changed {
            sh "echo 'i run when there is a successful build after a failed one'"
            sh "echo 'or a failed build after a successful one'"
        }
    }
}
